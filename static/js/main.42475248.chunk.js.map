{"version":3,"sources":["App.js","autobuild_version.js","index.js"],"names":["medicines","drugName","units","strengths","amount","volume","formatNumber","n","parseFloat","toFixed","Results","drugIdx","strengthIdx","prescribedDose","numStatDoses","statDoseStrength","drugStrength","totalDose","totalDoseMl","numVials","_","ceil","waste","wasteMl","className","MainView","useState","setDrugIdx","setStrengthIdx","prescribedDoseStr","setPrescribedDoseStr","setNumStatDoses","statDoseStrengthStr","setStatDoseStrengthStr","showResults","setShowResults","Number","showCalc","selectDrug","i","alert","selectStrength","selectNumStatDoses","htmlFor","id","value","disabled","onChange","e","target","map","x","parseInt","type","min","event","validity","valid","range","data-testid","onClick","Disclaimer","callback","App","disclaimerAgreed","setDisclaimerAgreed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42475248.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport 'mvp.css'\nimport './App.css'\nimport _ from 'lodash'\nimport { version as appVersion }  from './autobuild_version'\n\nconst divide = '\\u00f7'\n\nconst medicines = [\n    {\n        drugName: \"\",\n        units: \"mg\"\n    },\n    {\n        drugName: \"Morphine 1st Line\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 10, volume: 1 },\n            { amount: 15, volume: 1 },\n            { amount: 20, volume: 1 },\n            { amount: 30, volume: 1 },\n            { amount: 10, volume: 2 },\n            { amount: 15, volume: 2 },\n            { amount: 20, volume: 2 },\n            { amount: 30, volume: 2 },\n        ]\n    },\n    {\n        drugName: \"Diamorphine\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 10, volume: 1 },\n            { amount: 15, volume: 1 },\n            { amount: 30, volume: 1 },\n            { amount: 100, volume: 1 },\n            { amount: 10, volume: 2 },\n            { amount: 15, volume: 2 },\n            { amount: 30, volume: 2 },\n            { amount: 100, volume: 2 },\n        ]\n    },\n    {\n        drugName: \"Oxycodone\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 10, volume: 1 },\n            { amount: 20, volume: 2 },\n            { amount: 50, volume: 1 },\n        ]\n    },\n    {\n        drugName: \"Fentanyl\",\n        units: \"mcg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 50, volume: 1 },\n            { amount: 100, volume: 2 },\n            { amount: 500, volume: 5 },\n        ]\n    },\n    {\n        drugName: \"Haloperidol\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 5, volume: 1 },\n        ]\n    },\n    {\n        drugName: \"Metoclopramide\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 10, volume: 2 },\n        ]\n    },\n    {\n        drugName: \"Cyclizine\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 50, volume: 1 },\n        ]\n    },\n    {\n        drugName: \"Levomepromazine\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 25, volume: 1 },\n        ]\n    },\n    {\n        drugName: \"Midazolam\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 10, volume: 2 },\n        ]\n    },\n    {\n        drugName: \"Hyoscine Butylbromide\",\n        units: \"mg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 20, volume: 1 },\n        ]\n    },\n    {\n        drugName: \"Hyoscine Hydrobromide\",\n        units: \"mcg\",\n        strengths: [\n            { amount: 0 },\n            { amount: 400, volume: 1 },\n        ]\n    },\n]\n\nfunction formatNumber(n) {\n    return parseFloat(n.toFixed(2))\n}\n\nfunction Results({ drugIdx, strengthIdx, prescribedDose, numStatDoses, statDoseStrength }) {\n    const units = medicines[drugIdx].units\n    const drugStrength = medicines[drugIdx].strengths[strengthIdx]\n    const totalDose = prescribedDose + numStatDoses * statDoseStrength\n    const totalDoseMl = totalDose / drugStrength.amount * drugStrength.volume\n    const numVials = _.ceil(totalDoseMl / drugStrength.volume)\n    const waste = numVials * drugStrength.amount - totalDose\n    const wasteMl = numVials * drugStrength.volume - totalDoseMl\n    return (\n        <div className=\"box\">\n            <label>Results:</label>\n            <p>\n                <span>Total dose ({units}): {prescribedDose} + ({numStatDoses} x {statDoseStrength}) = {totalDose}{units}</span>\n            </p>\n            <p>\n                <span>Total dose (ml): {totalDose} {divide} {drugStrength.amount} x {drugStrength.volume} = {formatNumber(totalDoseMl)}ml</span>\n            </p>\n            <p>\n                <span>Number of vials: {numVials}</span>\n            </p>\n            <p>\n                <span>Waste: {formatNumber(waste)}{units} (= {formatNumber(wasteMl)}ml)</span>\n            </p>\n        </div>\n    )\n}\n\nfunction MainView() {\n    const [drugIdx, setDrugIdx] = useState(0)\n    const [strengthIdx, setStrengthIdx] = useState(0)\n    const [prescribedDoseStr, setPrescribedDoseStr] = useState(\"\")\n    const [numStatDoses, setNumStatDoses] = useState(0)\n    const [statDoseStrengthStr, setStatDoseStrengthStr] = useState(\"\")\n    const [showResults, setShowResults] = useState(false)\n\n    const prescribedDose = Number(prescribedDoseStr)\n    const statDoseStrength = Number(statDoseStrengthStr)\n    const units = medicines[drugIdx].units\n    const showCalc = !showResults && !!((prescribedDose && !numStatDoses) || statDoseStrength)\n\n    function selectDrug(i) {\n        if (medicines[i].units !== \"mg\") {\n            alert(`NOTE: ${medicines[i].drugName} is measured in micrograms (mcg or μg), not milligrams (mg).\\nThere are 1000mcg in 1mg`)\n        }\n        setDrugIdx(i)\n        selectStrength(0)\n    }\n\n    function selectStrength(i) {\n        setStrengthIdx(i)\n        setPrescribedDoseStr(\"\")\n        selectNumStatDoses(0)\n        setShowResults(false)\n    }\n\n    function selectNumStatDoses(n) {\n        setNumStatDoses(n)\n        if (!n) {\n            setStatDoseStrengthStr(\"\")\n        }\n    }\n\n    return (\n        <form>\n            <div>\n                <label htmlFor=\"drug\">Drug:</label>\n                <select id=\"drug\" value={drugIdx} disabled={showResults} onChange={e => selectDrug(Number(e.target.value))}>\n                    {medicines.map((x, i) => <option key={i} value={i}>{x.drugName}</option>)}\n                </select>\n            </div>\n            {!!drugIdx && <div>\n                <label htmlFor=\"strength\">Strength:</label>\n                <select id=\"strength\" value={strengthIdx} disabled={showResults} onChange={e => selectStrength(parseInt(e.target.value))}>\n                    {medicines[drugIdx].strengths.map((x, i) => <option key={i} value={i}>{x.amount ? `${x.amount}${units}/${x.volume}ml` : \"\"}</option>)}\n                </select>\n            </div>}\n            {!!strengthIdx && <>\n                <div>\n                    <label htmlFor=\"prescribed-dose\">Prescribed dose:</label>\n                    <input\n                        id=\"prescribed-dose\"\n                        type=\"number\"\n                        disabled={showResults}\n                        min={0}\n                        value={prescribedDoseStr}\n                        onChange={event => {\n                            if (event.target.validity.valid) {\n                                setPrescribedDoseStr(event.target.value)\n                            }\n                        }}\n                    />\n                    <span> {units}</span>\n                </div>\n                <div>\n                    <label htmlFor=\"num-stat-doses\">+ Stat/PRN doses:</label>\n                    <select\n                        id=\"num-stat-doses\"\n                        value={numStatDoses}\n                        disabled={showResults}\n                        onChange={e => selectNumStatDoses(parseInt(e.target.value))}>\n                        {_.range(7).map(x => <option key={x} value={x}>{x}</option>)}\n                    </select>\n                    <span> x </span>\n                    <input\n                        type=\"number\"\n                        data-testid=\"stat-dose-strength\"\n                        min={0}\n                        disabled={showResults || (!numStatDoses)}\n                        value={statDoseStrengthStr}\n                        onChange={event => {\n                            if (event.target.validity.valid) {\n                                setStatDoseStrengthStr(event.target.value)\n                            }\n                        }}\n                    />\n                    <span> {units}</span>\n                </div>\n                {showResults &&\n                    <Results\n                        drugIdx={drugIdx}\n                        strengthIdx={strengthIdx}\n                        prescribedDose={prescribedDose}\n                        numStatDoses={numStatDoses}\n                        statDoseStrength={statDoseStrength}\n                    />}\n                <button type=\"button\" onClick={() => { selectDrug(0) }}>Reset</button>\n                {showCalc &&\n                    <button type=\"button\" onClick={() => { setShowResults(true) }}>Calculate</button>\n                }\n            </>}\n        </form>\n    )\n}\n\nfunction Disclaimer({ callback }) {\n    return (\n        <div>\n            <h3>Disclaimer</h3>\n            <p>This application is intended to be used only to cross-check manual drug calculations.</p>\n            <p>It is not approved by NHS or any other healthcare body and you should not rely on it to perform drug calculations.</p>\n            <p>The authors accept no liability for any errors in the application.</p>\n            <button type=\"button\" onClick={callback}>OK</button>\n        </div>\n    )\n}\n\nexport default function App() {\n    const [disclaimerAgreed, setDisclaimerAgreed] = useState(false)\n    return <>\n        <h2>Drug calculation checker</h2>\n        {disclaimerAgreed\n            ? <MainView />\n            : <Disclaimer callback={() => setDisclaimerAgreed(true)} />\n        }\n        <div className=\"copyright\">\n            Version {appVersion}. Copyright (c) Tim Robinson https://github.com/timrobinson33\n        </div>\n    </>\n}\n","// generated by genversion\nexport const version = '1.0.0'\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}