{"version":3,"sources":["App.js","index.js"],"names":["medicines","drugName","strengths","mg","ml","App","useState","drugIdx","setDrugIdx","strengthIdx","setStrengthIdx","prescribedDoseStr","setPrescribedDoseStr","numStatDoses","setNumStatDoses","statDoseStrengthStr","setStatDoseStrengthStr","statDoseStrength","Number","prescribedDose","showCalc","totalDoseMg","drugStrength","totalDoseMl","numVials","_","ceil","wasteMl","wasteMg","formatNumber","n","parseFloat","toFixed","value","onChange","e","x","target","map","i","parseInt","type","min","range","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.393da4a0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css';\r\nimport _ from 'lodash'\r\n\r\nconst divide = '\\u00f7'\r\n\r\nconst medicines = [\r\n    { drugName: \"\" },\r\n    {\r\n        drugName: \"Morphine 1st Line\",\r\n        strengths: [\r\n            { mg: 10, ml: 1 },\r\n            { mg: 15, ml: 1 },\r\n            { mg: 20, ml: 1 },\r\n            { mg: 30, ml: 1 },\r\n            { mg: 10, ml: 2 },\r\n            { mg: 15, ml: 2 },\r\n            { mg: 20, ml: 2 },\r\n            { mg: 30, ml: 2 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Diamorphine\",\r\n        strengths: [\r\n            { mg: 10, ml: 1 },\r\n            { mg: 15, ml: 1 },\r\n            { mg: 30, ml: 1 },\r\n            { mg: 100, ml: 1 },\r\n            { mg: 10, ml: 2 },\r\n            { mg: 15, ml: 2 },\r\n            { mg: 30, ml: 2 },\r\n            { mg: 100, ml: 2 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Oxycodone\",\r\n        strengths: [\r\n            { mg: 10, ml: 1 },\r\n            { mg: 20, ml: 2 },\r\n            { mg: 50, ml: 1 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Fentanyl\",\r\n        strengths: [\r\n            { mg: 0.05, ml: 1 },\r\n            { mg: 0.1, ml: 2 },\r\n            { mg: 0.5, ml: 5 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Haloperidol\",\r\n        strengths: [\r\n            { mg: 5, ml: 1 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Metoclopramide\",\r\n        strengths: [\r\n            { mg: 10, ml: 2 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Cyclizine\",\r\n        strengths: [\r\n            { mg: 50, ml: 1 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Levomepromazine\",\r\n        strengths: [\r\n            { mg: 25, ml: 1 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Midazolam\",\r\n        strengths: [\r\n            { mg: 10, ml: 2 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Hyoscine Butylbromide\",\r\n        strengths: [\r\n            { mg: 20, ml: 1 },\r\n        ]\r\n    },\r\n    {\r\n        drugName: \"Hyoscine Hydrobromide\",\r\n        strengths: [\r\n            { mg: 0.4, ml: 1 },\r\n        ]\r\n    },\r\n]\r\n\r\nfunction App() {\r\n    const [drugIdx, setDrugIdx] = useState(0)\r\n    const [strengthIdx, setStrengthIdx] = useState(0)\r\n    const [prescribedDoseStr, setPrescribedDoseStr] = useState(\"\")\r\n    const [numStatDoses, setNumStatDoses] = useState(0)\r\n    const [statDoseStrengthStr, setStatDoseStrengthStr] = useState(\"\")\r\n\r\n    const statDoseStrength = Number(statDoseStrengthStr)\r\n    const prescribedDose = Number(prescribedDoseStr)\r\n\r\n    const showCalc = !!(drugIdx && prescribedDoseStr)\r\n\r\n    const totalDoseMg = showCalc && prescribedDose + numStatDoses * statDoseStrength\r\n    const drugStrength = showCalc && medicines[drugIdx].strengths[strengthIdx]\r\n    const totalDoseMl = showCalc && totalDoseMg / drugStrength.mg * drugStrength.ml\r\n    const numVials = _.ceil(totalDoseMl / drugStrength.ml)\r\n    const wasteMl = numVials * drugStrength.ml - totalDoseMl\r\n    const wasteMg = numVials * drugStrength.mg - totalDoseMg\r\n\r\n    const selectDrug = x => {\r\n        setDrugIdx(x)\r\n        setStrengthIdx(0)\r\n        setPrescribedDoseStr(\"\")\r\n        setNumStatDoses(0)\r\n        setStatDoseStrengthStr(\"\")\r\n    }\r\n\r\n    const formatNumber = n => parseFloat(n.toFixed(2))\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>Drug: </span>\r\n                <select value={drugIdx} onChange={e => selectDrug(Number(e.target.value))}>\r\n                    {medicines.map((x, i) => <option key={i} value={i}>{x.drugName}</option>)}\r\n                </select>\r\n            </div>\r\n            {!!drugIdx &&\r\n                <div>\r\n                    <span>Strength: </span>\r\n                    <select value={strengthIdx} onChange={e => setStrengthIdx(parseInt(e.target.value))}>\r\n                        {medicines[drugIdx].strengths.map((x, i) => <option key={i} value={i}>{`${x.mg}mg/${x.ml}ml`}</option>)}\r\n                    </select>\r\n                </div>\r\n            }\r\n            {!!drugIdx && <>\r\n                <div>\r\n                    <span>Prescribed dose: </span>\r\n                    <input type=\"number\" min={0} value={prescribedDoseStr} onChange={e => setPrescribedDoseStr(e.target.value)} />\r\n                    <span> mg</span>\r\n                </div>\r\n                <div>\r\n                    <span>Stat/PRN doses: </span>\r\n                    <select value={numStatDoses} onChange={e => setNumStatDoses(Number(e.target.value))}>\r\n                        {_.range(7).map(x => <option key={x} value={x}>{x}</option>)}\r\n                    </select>\r\n                    {!!numStatDoses && <>\r\n                        <span> x </span>\r\n                        <input type=\"number\" min={0} value={statDoseStrengthStr} onChange={e => setStatDoseStrengthStr(e.target.value)} />\r\n                        <span> mg</span>\r\n                    </>}\r\n                </div>\r\n                {showCalc && <>\r\n                    <div>\r\n                        <span>Total dose (mg): {prescribedDose} + ({numStatDoses} x {statDoseStrength}) = {totalDoseMg}mg</span>\r\n                    </div>\r\n                    <div>\r\n                        <span>Total dose (ml): {totalDoseMg} {divide} {drugStrength.mg} x {drugStrength.ml} = {formatNumber(totalDoseMl)}ml</span>\r\n                    </div>\r\n                    <div>\r\n                        <span>Number of vials: {numVials}</span>\r\n                    </div>\r\n                    <div>\r\n                        <span>Waste: {formatNumber(wasteMg)}mg (= {formatNumber(wasteMl)}ml)</span>\r\n                    </div>\r\n                </>}\r\n                <button onClick={() => setDrugIdx(0)}>Clear</button>\r\n            </>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n\r\nFentanyl should be in mcg\r\nshould it have a separate button to calculate?\r\n\r\n*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}